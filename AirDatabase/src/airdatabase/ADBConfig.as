package airdatabase
{
	import airdatabase.errors.messages.IncorrectTypeErrorMessage;
	import airdatabase.errors.throwError;
	import airdatabase.interfaces.IDataVerb;
	
	import flash.utils.ByteArray;
	
	import mx.utils.UIDUtil;
	
	public class ADBConfig 
	{
		private var _uri:String;
		
		private var _encryptionKey:*;
		
		private var _enableEncryption:Boolean;
		
		private var _asyncConnection:Boolean;
		
		private var _tables:Vector.<IDataVerb>;
		
		/**
		 * Constructor's arguments are closed for MXML component implementation.
		 */
		public function ADBConfig()
		{
			_asyncConnection = false;
		}
		
		
		public function get uri():String
		{
			return _uri;
		}
		public function set uri(value:String):void
		{
			_uri = value;
		}
		
		
		public function get tables():Vector.<IDataVerb>
		{
			return _tables;
		}
		public function set tables(value:Vector.<IDataVerb>):void
		{
			_tables = value;
		}
		
		
		[Inspectable(category="General", enumeration="false, true", defaultValue="false")]
		public function get asyncConnection():Boolean
		{
			return _asyncConnection;
		}
		public function set asyncConnection(value:Boolean):void
		{
			_asyncConnection = value;
		}
		
		/**
		 * When a value is set, <code>enableEncryption</code> is set to <code>true</code>.  Possible
		 * value types: String or ByteArray.  If the value is a String, a ByteArray will be created with
		 * it.  If the value is a ByteArray, then that value will be used directly to encrypt the database.
		 */
		public function get encryptionKey():*
		{
			return _encryptionKey;
		}
		public function set encryptionKey(value:*):void
		{
			var key:ByteArray;
			if(value is String)
			{
				key = getByteArrayKey(value);
			}
			else if(value is ByteArray)
			{
				key = value;
			}
			else
			{
				throwError(IncorrectTypeErrorMessage.INCORRECT_TYPE, {possibleTypes: 'String and ByteArray'});
			}
			
			_encryptionKey = key;
			
			enableEncryption = true;
		}
		
		/**
		 * If set to true, an autogenerated key will be created.  Once the key is created, it will be stored
		 * in the user's ELS (Encrypted Local Storage) directory of their computer.  This property will also 
		 * become true if a value is passed into <code>encryptionKey</code> property.
		 * 
		 * @see encryptionKey
		 */
		[Inspectable(category="General", enumeration="false, true", defaultValue="false")]
		public function get enableEncryption():Boolean
		{
			return _enableEncryption;
		}
		public function set enableEncryption(value:Boolean):void
		{
			_enableEncryption = value;
		}
		
		private function getByteArrayKey(value:String=null):ByteArray
		{
			var key:ByteArray = new ByteArray();
			
			if(value == null)
			{
				key.writeUTF(UIDUtil.createUID());
			}
			else
			{
				key.writeUTF(value);
			}
			
			return key;
		}
	}
}